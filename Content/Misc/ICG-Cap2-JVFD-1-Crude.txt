Transformaciones
Geométricas

Luis Rivera

Um Exemplo de OpenGL
#include <GL/glut.h>
#include <GL/gl.h>
#include <iostream>
using namespace std;
void drawPoint(int x, int y) {
x = x - 250;
y = 250-y;
glClear(GL_COLOR_BUFFER_BIT);
glColor3v(vcor);
glPointSize(10);
glBegin(GL_POINTS);
glVertex2f(x , y);
glEnd();
glFlush();
}
void mouse(int bin, int state , int x , int y) {
if(bin == GLUT_LEFT_BUTTON &amp;&amp;
state == GLUT_DOWN) drawPoint(x,y);
}

void display (void){}
void init (void)
{
glClearColor (1.0, 1.0, 0.0, 0.0);
glMatrixMode(GL_MODELVIEW);
glLoadIdentity();
glFlush();
}
int main (int argc,char** argv){
glutInit(&amp;argc,argv);
glutInitDisplayMode(GLUT_SINGLE |
GLUT_RGB);
glutInitWindowSize(500,500);
glutInitWindowPosition(0,0);
glutCreateWindow("My Window");
glutMouseFunc(mouse);
glutMotionFunc(drawSquare);
glutDisplayFunc(display);
init();
glutMainLoop();
return 0;
}

Transformações geométricas
• Translação
• Rotação
• Escala
• Reflexão

• Cisalha

Sistemas de Coordenadas
Sistema de
Referencia do
Universo

Sistema de
Referencia do
Objeto

Sistema de
Referencia
Normalizado

Sistema de
Referencia do
Dispositivo

• Transformações entre Sistemas de Coordenadas
Escala

Rotação

Traslação

SRO
SRU
Reflexão

SRU

Transformações Lineares
Bidimensionais
• Origem é ponto fixo.
 Translação não é transformação linear → transf. afim

• Operações de matrizes, para cada ponto (x, y, z) do
objeto
dV

 a c  x   ax + cy 
  = 

T = 
 b d  y   bx + dy 
 a1 a2

T =  b1 b2
c c
2
 1

a3  x   a1 x + a2 y + a3 z 
  

b3  y  =  b1 x + b2 y + b3 z 
c3  z   c1 x + c2 y + c3 z 

V
V + dV = Vt
1) T(A+B) = T(A) + T(B)
2) T(sA) = sT(A)
.... Dm: T(V) = V + dV
T(Va + Vb) = (Va+Vb)+dV
=Va + Vb +dV
T(Va) = Va + dV
T(Vb) = Vb + dV
T(Va)+ T(Vb) = Va +Vb +2dV

Translação
p' = p + T
[ x' , y' ] = [ x, y] + [Tx, Ty]
T

a b   x 
[ x' , y ' ] = 
????



c d   y

[ x' , y' , z' ] = [ x, y, z] + [Tx, Ty, Tz]

Translação
Transformação Linear??
T ( p1 ) = p1 + T

T ( p 2 ) = p2 + T

T ( p1 + p2 ) = T ( p1 ) + T ( p2 )???

T ( p1 + p2 ) = ( p1 + T ) + ( p2 + T ) = p1 + p2 + 2T

Errado??

1 0 Tx   x1 + x2   x1 + x2 + Tx 
0 1 T . y + y  =  y + y + T 
y  1
2
2
y  ????

 1
0 0 1   m  

m

Translação TL?
a b   x 
[ x' , y ' ] = 
????



c d   y

1 0 Tx   x   x + Tx 
0 1 T . y  =  y + T 
y  
y


0 0 1   1   1 





Transformada
Afim

[ x' , y' ] = x y+ Tx Ty = x + Tx y + Ty



Rotação

 cos( ) − sen( )  x 

 
 sen( ) cos( )  y 

Rotação





Rotação no eixo: combinação de translação e rotação

Translada (O)

Rotaciona (O)

Translada-1 (O)

Rotação
(Euler)

Rotando Z

Rotando X

Rotando Y

Ex.: Rotar em (10, 20 ,30)

Ordem de rotação afeta resultado?

Escala

Operação correta: combinação de traslação e escala

Reflexão
1 0 

Rflx = 
 0 − 1

 −1 0 

Rfly = 
 0 1
0 1

Rfly = x = 
1 0
 −1 0 

Rfl?? = 
 0 − 1

Reflexão
Reflexão respeito ao plano XZ

Reflexão respeito aos dois ejes ( ex. X e Y )

Cisalhamento (Shearing ou Skew)

1 k 

C x = 
0 1

 1 0

C y = 
 k 1

Cisalhamiento (Shearing ou Skew)
Distorsão em X

S=1

Distorsão em 2 direções

a=1
b=1

Transformações Rígidas
• Rotações, Reflexões y Traslações.
 Preservam ângulos e dimensões.
 Matrizes Ortonormais.
 Inversa é a matriz transposta (T-1 = TT).
 Isometrias do Espaço Euclideano

a + b = 1, c + d = 1
ac + bd = 0, ad − bc = 1
2

2

2

2

Isometrias do Plano

Composição de Transformações
• Sequência de transformações de um ponto P
arbitrário:
 T: Translação de P para origem.
 R, S, E: Rotação, Shear, Escala.
 Outras transformações desejadas.
 T-1: Translação inversa.
P’ = P [ T. R . S . E . O ] T-1

P

T

E

R

T-1 = P’

Trabalho bonus
• Na sala de aula
 Dados o programa
• testeMouse02.c (gera polígono e mouseMotion)

Transformadas Homogêneas
• Fácil Transformações Shear, Reflexão, Rotação, e
Escala – uma única matriz
 Translação realizado por separado
• Não é transformada Linear

• Em 3D,
 Ponto P = [x, y, z] ➔ P’ = [X, Y, Z, M]
 P = [x, y, z, 1] = [X/M, Y/M, Z/M, 1]
 P e P’ são equivalentes se P = (1/M) P’

Transformadas Homogêneas
Rotação

[x

Escala

Traslação

y

z 1] = x'

 cos( ) − sen( )
 sen( ) cos( )
y ' z ' 1
0
 0
0
 0

0
0
1
0

0
0

0
1

Projeções Geométricas
• Permitem a visualização 2D de objetos 3D
 Projeção no plano
 Raio projeção
 Centro de projeção

Plano de projeção: plano de imagem 2D
Raio de Projeção: raio pasando por P (do
objeto) e por um ponto do plano
Centro de projeção: ponto de convergencia
(ex. Origem)

Efeito
Projeção Perspectiva e pontos de fuga?

Projeções Geométricas
( Classificação )

Classes de Projeções
Projeção Paralela Ortográfica
(Centro de projeção no infinito)

Projeção Paralela Obliqua
(Raios de Projeção obliquas ao
plano de projeção)

Projeção Paralela Obliqua Cavaleira

Projeção Perspectiva
• Representação do espaço 3D: da forma vista por olho
humano

y

(x,y,z)

(x´,y´,0)

f

r

x
r´

z

x
f
x' y' z ' w   x
z

f
y
z

x' f y '
= =
x z y

f r'
=
z r

Ponto del
Objeto

Plano de
Imagem

f
x' = x
z

f
y' = y
z

y

y

1
0
z 1
0

0

0
1
0
0

0 0 
0 0 
= x
1 1/ f 

0 0 

f


1


( x'

f
y ' z ')   x
z

z

z/ f 

f
y
z


f


Projeção Perspectiva
( Plano de projeção em z = f )
• Plano de projeção está em Z = 0 (Translação em (0,0,f))

• Centro de Projeção em Z = -f

-f

y

f
x' =
x
z− f

Ponto do
Objeto

Plano de
Projeção

(x,y,z)

(x´,y´,0)
x

y' =

r

r´

f
y
z− f

z

x
x'


1
y ' z ' w  
x
(
)
−
z
/
f
+
1


y

1
0
z 1
0

0

0
1
0
0

0
0 
0
0 
= x
0 −1/ f 

0
1 

y

z − z / f + 1


1
y ')  
x
 (− z / f + 1)


1
y 
(− z / f + 1) 


1
y 0 1
(− z / f + 1)


( x'

Projeção Perspectiva
( Projeção em qualquer plano )
• Se centro de projeção em qualquier (fx, fy, fz)

x

y

 1
 0
z 1
 0

− f x

0
1
0
− fy

0
0
1
0

0 1
0 0

0  0

1 0

0
1
0
0

0
0  1

0
0   0
0 −1/ f z  0

0
1   f x

0
1
0
fy

0
0
1
0

0
0
0

1

1
0
z 1
0

0

0
1
0
0

0
0 
0 − 1 / f y 
0
0 

0
1 

• Se Plano de projeção em X = 0, y = 0 (respectivamente)

x

y

1
0
z 1
0

0

0
1
0
0

0 −1/ f x 
0
0 
0
0 

0
1 

x

y

Projeção Perspectiva
( Dois ou Três Pontos de Projeção = Pontos de Fuga )
• Dois pontos de projeção

1
0

0

0

0
1
0
0

0 −1/ f x 
0 − 1 / f y 
1
0 

0
1 

• Três pontos de projeção

1
0

0

0

0
1
0
0

0 −1/ f x 
0 − 1 / f y 
1 −1/ f z 

0
1 

1
0

0

0

0
1
0
0
P1

0 −1/ f x 
0
0 
1 −1/ f z 

0
1 

1
0

0

0

0
1
0
0

0
0 
0 − 1 / f y 
1 −1/ f z 

0
1 
P2

Cámara Virtual
• Observador
 Ponto de observação
• Posição da cámera: (x, y, z)
• Orientação (vetor view up)
• Posição do foco (D em direção C)
• Clipping planes (direção focal perpendicular)

